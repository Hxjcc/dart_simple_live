name: Windows Build & Release

# 设置为手动触发，并增加一个 "tag" 输入框
on:
  workflow_dispatch:
    inputs:
      tag:
        description: '请输入要发布的 Git Tag (例如: v1.0.0)'
        required: true

jobs:
  # 打包并发布 Windows 版本
  build-and-release-windows:
    runs-on: windows-latest
    permissions:
      # 需要写入权限来创建 Release
      contents: write
    steps:
      # 1. 签出代码
      # 会签出你在手动运行时选择的分支
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 设置 Flutter 环境
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.x"
          cache: true
      
      # 3. 启用 Windows桌面应用支持
      - name: Enable Flutter Desktop for Windows
        run: flutter config --enable-windows-desktop
      
      # 4. 获取项目依赖
      - name: Restore Packages
        # 指定在 simple_live_app 目录下运行
        working-directory: simple_live_app
        run: flutter pub get

      # 5. 安装 flutter_distributor 用于打包
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      # 6. 打包 Windows 应用
      - name: Build Windows App
        working-directory: simple_live_app
        run: flutter_distributor package --platform windows --targets msix,zip --skip-clean

      # 7. (可选) 将构建产物上传到 Artifacts，方便调试和下载
      - name: Upload Windows APP to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip

      # 8. 读取应用版本信息
      - name: Read version info
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          # 【重要】修正了 app_version.json 文件的路径
          path: simple_live_app/assets/app_version.json

      # 9. 创建并发布到 GitHub Release
      - name: Create and Upload Release
        uses: softprops/action-gh-release@v1
        with:
          # 使用手动运行时输入的 tag 作为 Release 的 Git Tag
          tag_name: ${{ github.event.inputs.tag }}
          # Release 的标题，例如 "Release v1.0.0"
          name: "Release ${{ github.event.inputs.tag }}"
          # Release 的描述内容，从 json 文件中读取
          body: "${{ fromJson(steps.version.outputs.content).version_desc }}"
          # 是否为预发布版本，从 json 文件中读取
          prerelease: ${{ fromJson(steps.version.outputs.content).prerelease }}
          # 使用 GitHub 自动提供的 Token
          token: ${{ secrets.GITHUB_TOKEN }}
          # 需要上传的文件列表
          files: |
            simple_live_app/build/dist/*/*.msix
            simple_live_app/build/dist/*/*.zip

      # 10. 完成
      - name: Job Finished
        run: echo "🪟 Windows build and release job's status is ${{ job.status }}."
